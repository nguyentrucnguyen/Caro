// caro.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <iostream>
#include <Windows.h>
#include <fstream>
#include <string>

void FixConsoleWindow() {
    HWND consoleWindow = GetConsoleWindow();
    LONG style = GetWindowLong(consoleWindow, GWL_STYLE);
    style = style & ~(WS_MAXIMIZEBOX) & ~(WS_THICKFRAME);
    SetWindowLong(consoleWindow, GWL_STYLE, style);
}
void GotoXY(int x, int y) {
    COORD coord;
    coord.X = x;
    coord.Y = y;
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
}

void Drawboard(){
    for (int i = 0; i < 29; i++) {
        for (int j = 0; j < 61; j++) {
            if (i % 2 == 1) {
                if (j % 4 == 0) {
                    std::cout << char(179);
                }
                else std::cout << " ";
            }
            else std::cout << char(196);
        }
        std::cout << "\n";
    }
}
bool checkwin1(int turn, int** board, int x, int y) {
    int k = 1;
    int block = 0;
    for (int i = 1;x + i <14 ; i++) {
        if (board[x + i][y] == turn) k += 1;
        else if (board[x + i][y] == 0) break;
        else if (board[x + i][y] == -turn) {block += 1; break;}
    }

    for (int i = 1; x - i >= 0; i++) {
        if (board[x - i][y] == turn) k += 1;
        else if (board[x - i][y] == 0) break;
        else if (board[x - i][y] == -turn) { block += 1; break; }
    }
    bool e = (k > 5) || ((k == 5) && block < 2);
    
    if (e) {
        for (int i = 0; x + i < 14; i++) {
            if (board[x + i][y] == turn) 
                if (board[x + i][y] == turn)
                {
                    GotoXY(2 + (y) * 4, 1 + (x + i) * 2);
                    if (turn == -1) {
                        std::cout << "\x1B[32mX\033[0m";
                    }
                    else
                    {
                        std::cout << "\x1B[32mO\033[0m";
                    }
                }
            else if (board[x + i][y] == 0) break;
            else if (board[x + i][y] == -turn) { break; }
        }

        for (int i = 1; x - i >= 0; i++) {
            if (board[x - i][y] == turn) {
                GotoXY(2 + (y) * 4, 1 + (x - i) * 2);
                if (turn == -1) {
                    std::cout << "\x1B[32mX\033[0m";
                }
                else
                {
                    std::cout << "\x1B[32mO\033[0m";
                }
            }
            else if (board[x - i][y] == 0) break;
            else if (board[x - i][y] == -turn) { break; }
        }
    }
    
    return e;

}
bool checkwin2(int turn, int** board, int x, int y) {
    int k = 1;
    int block = 0;
    for (int i = 1;y + i<15; i++) {
        if (board[x][y + i] == turn) k += 1;
        else if (board[x][y + i] == 0) break;
        else if (board[x][y + i] == -turn) { block += 1; break; }
    }

    for (int i = 1; y - i >= 0; i++) {
        if (board[x][y - i] == turn) k += 1;
        else if (board[x][y - i] == 0) break;
        else if (board[x][y - i] == -turn) { block += 1; break; }
    }


    bool e = (k > 5) || ((k == 5) && block < 2);
    if (e) {
        for (int i = 0; y + i < 15; i++) {
            if (board[x][y + i] == turn)
                if (turn == -1) {
                    GotoXY(2 + (y + i) * 4, 1 + (x) * 2);
                    if (turn == -1)
                    {
                        std::cout << "\x1B[32mX\033[0m";
                    }
                    else
                    {
                        std::cout << "\x1B[32mO\033[0m";
                    }
                }
            else if (board[x][y + i] == 0) break;
            else if (board[x][y + i] == -turn) { break; }
        }

        for (int i = 1; y - i >= 0; i++) {
            if (board[x][y - i] == turn)
            {
                GotoXY(2 + (y - i) * 4, 1 + (x) * 2);
                if (turn == -1) {
                    std::cout << "\x1B[32mX\033[0m";
                }
                else
                {
                    std::cout << "\x1B[32mO\033[0m";
                }
            }
            else if (board[x][y - i] == 0) break;
            else if (board[x][y - i] == -turn) { break; }
        }
    }
    return e;
}
bool checkwin3(int turn, int** board, int x, int y) {
    int k = 1;
    int block = 0;
    for (int i = 1; y + i < 15 && x + i < 14; i++) {
        if (board[x + i][y + i] == turn) k += 1;
        else if (board[x + i][y + i] == 0) break;
        else if (board[x + i][y + i] == -turn) { block += 1; break; }
    }

    for (int i = 1; y - i >= 0 && x - i >= 0; i++) {
        if (board[x - i][y - i] == turn) k += 1;
        else if (board[x - i][y - i] == 0) break;
        else if (board[x - i][y - i] == -turn) { block += 1; break; }
    }
    bool e = (k > 5) || ((k == 5) && block < 2);
    if (e) {
        for (int i = 0; y + i < 15 && x + i < 14; i++) {
            if (board[x + i][y + i] == turn)
            { 
                    GotoXY(2 + (y + i) * 4, 1 + (x + i) * 2);
                    if (turn == -1) {
                        std::cout << "\x1B[32mX\033[0m";
                    }
                    else
                    {
                        std::cout << "\x1B[32mO\033[0m";
                    }
            }
            else if (board[x + i][y + i] == 0) break;
            else if (board[x + i][y + i] == -turn) { break; }
        }

        for (int i = 1; y - i >= 0 && x - i >= 0; i++) {
            if (board[x - i][y - i] == turn) {
                GotoXY(2 + (y - i) * 4, 1 + (x - i) * 2);
                if (turn == -1) {
                    std::cout << "\x1B[32mX\033[0m";
                }
                else
                {
                    std::cout << "\x1B[32mO\033[0m";
                }
            }
            else if (board[x - i][y - i] == 0) break;
            else if (board[x - i][y - i] == -turn) {break; }
        }
    }
    return e;
}
bool checkwin4(int turn, int** board, int x, int y) {
    int k = 1;
    int block = 0;

    for (int i = 1; y + i < 15 && x - i >= 0; i++) {
        if (board[x - i][y + i] == turn) k += 1;
        else if (board[x - i][y + i] == 0) break;
        else if (board[x - i][y + i] == -turn) { block += 1; break; }
    }

    for (int i = 1; y - i >= 0 && x + i < 15; i++) {
        if (board[x + i][y - i] == turn) k += 1;
        else if (board[x + i][y - i] == 0) break;
        else if (board[x + i][y - i] == -turn) { block += 1; break; }
    }

    bool e = (k > 5) || ((k == 5) && block < 2);
    if (e) {

        for (int i = 0; y + i < 15 && x - i >= 0; i++) 
        {
            if (board[x - i][y + i] == turn)
            {
                GotoXY(2 + (y + i) * 4, 1 + (x - i) * 2);
                if (turn == -1) {
                    std::cout << "\x1B[32mX\033[0m";
                }
                else
                {
                    std::cout << "\x1B[32mO\033[0m";
                }
            }
            else if (board[x - i][y + i] == 0) break;
            else if (board[x - i][y + i] == -turn) { break; }
        }

        for (int i = 1; y - i >= 0 && x + i < 15; i++) {
            if (board[x + i][y - i] == turn)
            {
                GotoXY(2 + (y - i) * 4, 1 + (x + i) * 2);
                if (turn == -1) {
                    std::cout << "\x1B[32mX\033[0m";
                }
                else
                {
                    std::cout << "\x1B[32mO\033[0m";
                }
            }
            else if (board[x + i][y - i] == 0) break;
            else if (board[x + i][y - i] == -turn) { block += 1; break; }
        }
    }
    return e;
}
bool checkwin(int turn, int** board, int x, int y) {
    return checkwin1(turn, board, x, y) || checkwin2(turn, board, x, y) || checkwin3(turn, board, x, y) || checkwin4(turn, board, x, y);
}
bool mark(int& turn, int**board,int x,int y,int& count) {
    if (board[x][y]==0) {
        if (turn == -1) std::cout << "\x1B[31mX\033[0m"; else std::cout << "\x1B[34mO\033[0m";
        GotoXY(80, 10);
        std::cout << "Turn "; if (turn == 1) std::cout << "X"; else std::cout << "O";
        board[x][y] = turn;
        turn *= -1;
        count+=1;
        return checkwin(-turn, board, x, y);
    }
    return false;
}
void Resetdata(int**& board) {
    for (int i = 0; i < 14; i++) {
        for (int j = 0; j < 15; j++) {
            board[i][j] = 0;
        }
    }
}

void Drawmark(int** board) {
    for (int i = 0; i < 14; i++) {
        for (int j = 0; j < 15; j++) {
            if (board[i][j] != 0) {
                GotoXY(2 + 4 * j, 1 + 2 * i);
                if (board[i][j] == -1) {
                    std::cout << "\x1B[31mX\033[0m";
                }
                else std::cout << "\x1B[34mO\033[0m";
            }
        }
    }

}

void save(int** board, int turn,int count) {
    GotoXY(80, 28);
    std::cout << "Save name: ";
    std::string filename;
    std::getline(std::cin, filename);
    std::fstream fo(filename, std::ios_base::out);
    fo << turn << " " << count << '\n';
    for (int i = 0; i < 14; i++) {
        for (int j = 0; j < 15; j++) {
            fo << board[i][j] << " ";
        }
        fo << '\n';
    }
    fo.close();
    system("cls");
    Drawboard();
    Drawmark(board);
    GotoXY(80, 10);
    std::cout << "Turn "; if (turn == -1) std::cout << "X"; else std::cout << "O";
}

void load(int** board, int& turn, int& count,std::string filename="") {
    std::fstream fo;
    if (filename == "") {
        GotoXY(80, 28);
        std::cout << "load name: ";
        std::getline(std::cin, filename);
        std::fstream fo(filename, std::ios_base::in);
        if (!fo) {
            GotoXY(80, 28);
            std::cout << "save name not exits";
            Sleep(200);
            getwchar();
        }
        else {
            fo >> turn >> count;
            for (int i = 0; i < 14; i++) {
                for (int j = 0; j < 15; j++) {
                    fo >> board[i][j];
                }
            }
            fo.close();
        }
    }
    else {
        std::fstream fo(filename, std::ios_base::in);
        fo >> turn >> count;
        for (int i = 0; i < 14; i++) {
            for (int j = 0; j < 15; j++) {
                fo >> board[i][j];
            }
        }
        fo.close();

    }
    system("cls");
    Drawboard();
    Drawmark(board);
    GotoXY(80, 10);
    std::cout << "Turn "; if (turn == -1) std::cout << "X"; else std::cout << "O";
}

int play(int **board,int turn,int count,std::string filename="") {
    if(filename=="") Resetdata(board);
    system("cls");
    Drawboard();
    char k = 0;
    count = 0;
    int x = 2; int y = 1;
    int X_ = 0, Y_ = 0;
    turn = -1;
    bool check = false;
    if (filename != "") {
        load(board, turn, count, filename);
    }
    GotoXY(80, 10);
    std::cout << "Turn "; if (turn == -1) std::cout << "X"; else std::cout << "O";
    Sleep(200);
    while (true)
    {
        GotoXY(x, y);
        k = _getwch();
        k = toupper(k);
        switch (k)
        {
        case 75:
        case 'A': if (x > 4) { x -= 4; Y_ -= 1; }; break;
        case 77:
        case 'D': if (x < 56) { x += 4; Y_ += 1; }; break;
        case 80:
        case 'S': if (y < 26) { y += 2; X_ += 1; }; break;
        case 72:
        case 'W': if (y > 2) { y -= 2; X_ -= 1; }; break;
        case 13:
        case ' ': check = mark(turn, board, X_, Y_, count); break;
        case 'L': /*luu*/ save(board, turn,count); break;
        case 'T': /*menu*/ load(board, turn, count); break;
        case 27: return 2;
        }
        if (count == 14 * 15) return 0;
        if (check) return turn * -1;;
    }
}

void game(std::string name="") {
    int** board = new int* [14];
    int turn=0, count=0;
    for (int i = 0; i < 14; i++) board[i] = new int[15]{ 0 };
    do {
        int win = play(board, turn, count, name);
        name = "";
        if (win == 0) {
            GotoXY(80, 20); std::cout << "nguoi choi 1 hoa voi nguoi choi 2";
        }
        if (win == -1) {
            GotoXY(80, 20); std::cout << "nguoi choi 1 - X thang";
        }
        if (win == 1) {
            GotoXY(80, 20); std::cout << "nguoi choi 2 - O thang";
        }
        if (win == 2) {
            for (int i = 0; i < 14; i++) {
                delete[] board[i];
            }
            delete[] board;
            return;
        }
        Sleep(200);
        getwchar();
    } while (true);
}

int main()
{
    std::string check;
    do {
        system("cls");
        std::cout << "1. New game\n2. Load game\n3. Exit\n";
        std::getline(std::cin, check);
        if (check == "1") {
            game();
        }
        else if(check == "2") {
            std::cout << "saved name: ";
            std::string filename;
            std::getline(std::cin, filename);
            std::fstream test(filename, std::ios_base::in);
            if (!test) {
                std::cout << "Save game not exits";
                Sleep(200);
                getwchar();
            }
            else {
                test.close();
                game(filename);
            }
        }
    } while (check != "3");
}
